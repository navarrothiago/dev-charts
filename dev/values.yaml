# https://github.com/bitnami/charts/tree/main/bitnami/redmine
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

redmine:
  enabled: true
  redmineUsername: admin
  redminePassword: admin
  databaseType: postgresql
  global:
    persistence:
      storageClass: longhorn
#  image:
#    pullPolicy: Always
  service:
    type: ClusterIP
  ingress:
    ## @param ingress.enabled Enable ingress record generation for Redmine
    ##
    enabled: true
    ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param ingress.pathType Ingress path type
    ##
    pathType: Prefix
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion: ""
    ## @param ingress.hostname Default host for the ingress record
    ##
    ## TODO: make sure the name will be resolved. You can put inside your /etc/host file (local testing)
    hostname: argus.dti.ctex.eb.mil.br
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
    ##
    path: /
    ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      kubernetes.io/ingress.class: traefik
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `ingress.tls=true` and `ingress.certManager=false`
    ##
    tls: true
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: redmine.local
    ##     path: /
    ##
    extraHosts: []
    ## @param ingress.extraPaths An array with additional arbitrary paths that may need to be added to the ingress under the main host
    ## extraPaths:
    ## - path: /*
    ##   backend:
    ##     serviceName: ssl-redirect
    ##     servicePort: use-annotation
    ##
    extraPaths: []
    ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - redmine.local
    ##   secretName: redmine.local-tls
    ##
    extraTls: []
    ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## name should line up with a tlsSecret set further up
    ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ## e.g:
    ## - name: redmine.local-tls
    ##   key:
    ##   certificate:
    ##
    secrets: []
    ## @param ingress.extraRules Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: redmine.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: redmine-svc
    ##           port:
    ##             name: http
    ##
    extraRules:
      - host: argus.dti.ctex.eb.mil.br
        http:
          paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev-redmine
                port:
                  name: http

  persistence:
    size: 1Gi
  mariadb:
    enabled: false
  postgresql:
    # architecture: replication
    architecture: standalone
    volumePermissions:
      enabled: true
    global:
      persistence:
        storageClass: longhorn
      postgresql:
        auth:
          password: admin
          postgresPassword: admin

    primary:
      persistence:
        size: 1Gi
      nodeSelector:
        kubernetes.io/hostname: rds-defesa
    secondary:
      persistence:
        size: 1Gi

kube-prometheus-stack:
  enabled: true
  grafana:
    sidecar:
      dashboards:
        enabled: true
        labelValue: "dev"
  prometheusSpec:
    ## Prometheus StorageSpec for persistent data
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
    ##
    storageSpec:
    ## Using PersistentVolumeClaim
    ##
     volumeClaimTemplate:
       spec:
         storageClassName: longhorn
         accessModes: ["ReadWriteOnce"]
         resources:
           requests:
             storage: 1Gi
    #    selector: {}
